ðŸ”¹ Problem Statement (PSE)

For each element in an array, find the nearest smaller element to its left.
If no such element exists, return -1.

ðŸ”¹ Example
Input: arr = [4, 5, 2, 10, 8]
Output: [-1, 4, -1, 2, 2]

Explanation:
- For 4 â†’ no left element â†’ -1
- For 5 â†’ smaller on left = 4
- For 2 â†’ no smaller on left â†’ -1
- For 10 â†’ smaller on left = 2
- For 8 â†’ smaller on left = 2

ðŸ”¹ Brute Force Approach

For each element at index i, check all elements to the left (j = i-1, i-2, â€¦, 0).

Pick the first smaller element encountered.

If none is found â†’ -1.




///////////////////////////////////////////ðŸ”¹ C++ Brute Force Code////////////////////////////////////////////////////////////////////////////////////////



#include <bits/stdc++.h>
using namespace std;

vector<int> previousSmallerElement(vector<int>& arr) {
    int n = arr.size();
    vector<int> result(n, -1);

    for (int i = 0; i < n; i++) {
        for (int j = i - 1; j >= 0; j--) {
            if (arr[j] < arr[i]) {
                result[i] = arr[j];
                break; // stop at first smaller element
            }
        }
    }
    return result;
}

int main() {
    vector<int> arr = {4, 5, 2, 10, 8};
    vector<int> ans = previousSmallerElement(arr);

    for (int x : ans) cout << x << " ";
    return 0;
}

ðŸ”¹ Complexity

Time: O(nÂ²) (nested loops)

Space: O(n) (result array)

âš¡ Note:
Efficient solution uses a stack â†’ O(n) time.






///////////////////Optimal Approach  using stack o(N)///////////////////////////




